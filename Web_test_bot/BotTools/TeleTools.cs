using System;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using Web_test_bot.DbTools;
using Web_test_bot.DbTools.DbObjeckts;

namespace Web_test_bot.BotTools
{
    public class TeleTools
    {
        public static InlineKeyboardMarkup GetOneCallomMenu(List<MyInput> buttons)
        {
            var result = new InlineKeyboardMarkup();

            foreach (var item in buttons.Where(i => i.InputType == "StaticInput"))
            {
                string callback = $"{item.NextMenu.EntyCode}{item.NextMenu.Id}";

                result.AddNewRow(
                    new InlineKeyboardButton() { Text = item.InputContent, CallbackData = callback }
                );
            }

            return result;
        }

        public static async Task<List<MyMessage>> SendPhotoForMenu(
            MyChat myChat,
            Telegram.Bot.TelegramBotClient client,
            CancellationToken cancellationToken,
            MyDbContext db
        )
        {
            List<MyMessage> result = new List<MyMessage>();
            try
            {
                var photoSizeList = myChat.CurentMenu.PhotoFormMenu;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if (photoSizeList == null || !photoSizeList.Any())
                {
                    return null;
                }
                var mediaGroup = new List<IAlbumInputMedia>();
                foreach (var photo in photoSizeList)
                {
                    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ photo —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –ø–æ—Ç–æ–∫
                    mediaGroup.Add(new InputMediaPhoto(new InputFileId(photo.FileId)));
                }
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
                var messages = await client.SendMediaGroupAsync(
                    chatId: myChat.TeleChatId, // ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    media: mediaGroup, // –°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞
                    cancellationToken: cancellationToken,
                    disableNotification: true // –¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã
                );

                foreach (var message in messages.ToList())
                {
                    var mymsg = MyMessage.CreateMyMessageFroMessage(message);
                    mymsg.IsIncomingMessage = false;
                    mymsg.NeedToDelite = true;
                    result.Add(mymsg);
                }

                return result;
            }
            catch
            {
                ConssolWriting(
                    $"‚ö†Ô∏è –Ω–µ –ø–æ–ª—É—á–∏–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ —á–∞—Ç–µ TeleID:{myChat.TeleChatId} –≤ –º–µ–Ω—é {myChat.CurentMenu.MenuCode}"
                );
            }
            return null;
        }

        public static async Task<List<MyMessage>> SendPhotoForIsue(
            MyChat myChat,
            Telegram.Bot.TelegramBotClient client,
            CancellationToken cancellationToken,
            MyDbContext db,
            MyWorkEnty? isue
        )
        {
            List<MyMessage> result = new List<MyMessage>();
            try
            {
                var photoIsue = isue
                    .Items.Where(i => i.Key == "photo" && i.IsDelite == false)
                    .ToList();

                var photoSizeList = photoIsue.SelectMany(i => i.TelegramPfotoes);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if (photoSizeList == null || !photoSizeList.Any())
                {
                    return null;
                }
                var mediaGroup = new List<IAlbumInputMedia>();
                foreach (var photo in photoSizeList)
                {
                    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ photo —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –ø–æ—Ç–æ–∫
                    mediaGroup.Add(
                        new InputMediaPhoto(new InputFileId(photo.FileId))
                        {
                            Caption = "–§–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ",
                        }
                    );
                }
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
                var messages = await client.SendMediaGroupAsync(
                    chatId: myChat.TeleChatId, // ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    media: mediaGroup, // –°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞
                    cancellationToken: cancellationToken // –¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã
                );

                foreach (var message in messages.ToList())
                {
                    var mymsg = MyMessage.CreateMyMessageFroMessage(message);
                    mymsg.IsIncomingMessage = false;
                    mymsg.NeedToDelite = true;
                    result.Add(mymsg);
                }

                return result;
            }
            catch
            {
                ConssolWriting(
                    $"‚ö†Ô∏è –Ω–µ –ø–æ–ª—É—á–∏–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ —á–∞—Ç–µ TeleID:{myChat.TeleChatId} –≤ –º–µ–Ω—é {myChat.CurentMenu.MenuCode}"
                );
            }
            return null;
        }

        public static void ConssolWriting(string message)
        {
            Console.WriteLine($"ü§ñ: ({DateTime.Now.ToString("HH:mm:ss ff")}):: {message}");
            LogToFile($"ü§ñ;({DateTime.Now.ToString("HH:mm:ss ff")});{message}");
        }

        private static void LogToFile(string message)
        {
            var logFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "log.csv");
            try
            {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω)
                using (StreamWriter writer = new StreamWriter(logFilePath, true)) // true - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                {
                    writer.WriteLine(message); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
                }
            }
            catch (Exception ex)
            {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {ex.Message}");
                DeleteLogFile();
            }
        }

        public static void DeleteLogFile()
        {
            var logFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "log.csv");

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                if (System.IO.File.Exists(logFilePath))
                {
                    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                    System.IO.File.Delete(logFilePath);
                    Console.WriteLine("–§–∞–π–ª log —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.");
                }
                else
                {
                    Console.WriteLine("–§–∞–π–ª log –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
                }
            }
            catch (Exception ex)
            {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {ex.Message}");
            }
        }

        public static async Task<Message> SendMenuTextOrPhoto(
            ITelegramBotClient client,
            MyChat myChat,
            CancellationToken cancellationToken,
            IReplyMarkup? ButtonMenu,
            MyDbContext db,
            bool NeedToDelite,
            bool isThisMessageIsEditeMenu
        )
        {
            try
            {
                try
                {
                    if (myChat.CurentMenu.PhotoFormMenu.Any())
                    {
                        var messMessagePhoto = await client.SendPhotoAsync(
                            chatId: myChat.TeleChatId,
                            caption: myChat.CurentMenu.Content,
                            photo: myChat.CurentMenu.PhotoFormMenu.FirstOrDefault().FileId,
                            replyMarkup: ButtonMenu,
                            cancellationToken: cancellationToken,
                            disableNotification: false
                        );

                        var myMessagePhoto = MyMessage.CreateMyMessageFroMessage(messMessagePhoto);
                        myMessagePhoto.IsIncomingMessage = false;
                        myMessagePhoto.NeedToDelite = NeedToDelite;
                        myChat.AddMessage(myMessagePhoto);

                        await db.SaveChangesAsync();

                        return messMessagePhoto;
                    }
                    else
                    {
                        var messageText = await client.SendTextMessageAsync(
                            chatId: myChat.TeleChatId,
                            text: myChat.CurentMenu.Content,
                            replyMarkup: ButtonMenu,
                            cancellationToken: cancellationToken,
                            disableNotification: false
                        );

                        var myMessageText = MyMessage.CreateMyMessageFroMessage(messageText);

                        myMessageText.IsIncomingMessage = false;
                        myMessageText.NeedToDelite = NeedToDelite;

                        myChat.AddMessage(myMessageText);
                        myChat.CurentMessageIdForMenu = myMessageText.TeleMessageId;
                        await db.SaveChangesAsync();

                        return messageText;
                    }
                }
                catch
                {
                    var messageText = await client.SendTextMessageAsync(
                        chatId: myChat.TeleChatId,
                        text: myChat.CurentMenu.Content,
                        replyMarkup: ButtonMenu,
                        cancellationToken: cancellationToken,
                        disableNotification: false
                    );

                    var myMessageText = MyMessage.CreateMyMessageFroMessage(messageText);

                    myMessageText.IsIncomingMessage = false;
                    myMessageText.NeedToDelite = NeedToDelite;

                    myChat.AddMessage(myMessageText);
                    myChat.CurentMessageIdForMenu = myMessageText.TeleMessageId;
                    await db.SaveChangesAsync();

                    return messageText;
                }
            }
            catch (System.Exception ex)
            {
                var messageText = await client.SendTextMessageAsync(
                    chatId: myChat.TeleChatId,
                    text: "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n –ù–∞–∂–º–∏ /start",
                    cancellationToken: cancellationToken,
                    disableNotification: false
                );

                var myMessageText = MyMessage.CreateMyMessageFroMessage(messageText);

                myMessageText.IsIncomingMessage = false;
                myMessageText.NeedToDelite = NeedToDelite;

                myChat.AddMessage(myMessageText);
                myChat.CurentMessageIdForMenu = myMessageText.TeleMessageId;
                await db.SaveChangesAsync();

                return messageText;
            }
        }

        public static InlineKeyboardMarkup GetPaginateButtons(
            MyChat currentChat,
            InlineKeyboardMarkup allButtons,
            int nRows
        )
        {
            // 1. –†–∞–∑–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã
            InlineKeyboardButton[] backButtonRow = null;
            InlineKeyboardButton[] paginationControls = null;
            List<InlineKeyboardButton[]> contentButtons = new List<InlineKeyboardButton[]>();

            foreach (var row in allButtons.InlineKeyboard)
            {
                bool isBackButton = row.Any(b =>
                    b.Text.Equals("–Ω–∞–∑–∞–¥", StringComparison.OrdinalIgnoreCase)
                );
                bool isPagination = row.Any(b =>
                    (b.CallbackData?.Contains("|nb") ?? false)
                    || (b.CallbackData?.Contains("|nf") ?? false)
                );

                if (isBackButton)
                {
                    backButtonRow = row.ToArray();
                }
                else if (isPagination)
                {
                    paginationControls = row.ToArray();
                }
                else
                {
                    contentButtons.Add(row.ToArray());
                }
            }

            // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            int currentPage = 0;
            var lastMessage = currentChat.ChatMessages.LastOrDefault();
            currentPage = GetIdBDFromCallBack_kostil(lastMessage.MessageContent, "nf");
            if (currentPage == 0)
            {
                currentPage = GetIdBDFromCallBack_kostil(lastMessage.MessageContent, "nb");
            }
            // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∫–Ω–æ–ø–æ–∫
            int totalItems = contentButtons.Count;
            int totalPages = (int)Math.Ceiling((double)totalItems / nRows);
            currentPage = Math.Clamp(currentPage, 0, totalPages - 1);

            int start = currentPage * nRows;
            int end = Math.Min(start + nRows, totalItems);

            // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            var resultButtons = new List<InlineKeyboardButton[]>();

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –Ω–∞—á–∞–ª–µ
            if (backButtonRow != null)
            {
                resultButtons.Add(backButtonRow);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for (int i = start; i < end; i++)
            {
                resultButtons.Add(contentButtons[i]);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –∫–æ–Ω–µ—Ü
            if (paginationControls != null)
            {
                resultButtons.Add(paginationControls);
            }
            else if (totalItems > nRows)
            {
                //–µ—Å–ª–∏ totalItems > 10 –Ω–æ paginationControls==null  –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
                List<InlineKeyboardButton> paginationRow = new List<InlineKeyboardButton>();

                if (currentPage > 0)
                {
                    paginationRow.Add(
                        new InlineKeyboardButton("‚¨ÖÔ∏è")
                        {
                            CallbackData =
                                $"{currentChat.CurentMenu.EntyCode}{currentChat.CurentMenu.Id}|nb{currentPage - 1}",
                        }
                    );
                }

                // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
                if (currentPage < totalPages - 1)
                {
                    paginationRow.Add(
                        new InlineKeyboardButton("‚û°Ô∏è")
                        {
                            CallbackData =
                                $"{currentChat.CurentMenu.EntyCode}{currentChat.CurentMenu.Id}|nf{currentPage + 1}",
                        }
                    );
                }

                if (paginationRow.Any())
                    resultButtons.Add(paginationRow.ToArray());
            }

            return new InlineKeyboardMarkup(resultButtons);
        }

        public static int GetIdBDFromCallBack_kostil(string caallBack, string entCode)
        {
            if (caallBack == null)
            {
                return 0;
            }
            if (caallBack == "")
            {
                return 0;
            }
            if (!caallBack.Contains(entCode))
            {
                return 0;
            }
            string menu = caallBack.Split('|').FirstOrDefault(i => i.Contains(entCode));
            menu = menu.Replace(entCode, "");
            menu = menu.Replace(":", "");
            if (menu != null)
            {
                // –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ int
                if (int.TryParse(menu, out int id))
                {
                    return id; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
                }
            }

            return 0;
        }
    }
}
