using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;
using Microsoft.EntityFrameworkCore;
using Microsoft.Identity.Client;
using Telegram.Bot;
using Telegram.Bot.Requests;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Web_test_bot.BotTools;
using Web_test_bot.BotTools.ScriptTools;
using Web_test_bot.DbTools.DbObjeckts;

namespace Web_test_bot.DbTools.DbObjeckts
{
    public class MyChat : IDbMyElement
    {
        [Key]
        public int Id { get; set; } // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞

        public string EntyName
        {
            get { return "–ß–∞—Ç"; }
        } // –†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        public string EntyCode
        {
            get { return "Ch"; }
        }
        public DateTime? CreatedAt { get; set; } = DateTime.Now;
        public bool? IsDelite { get; set; } = false;

        /// <summary>
        /// –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Ç–∞.
        /// </summary>
        public string? TeleChatUserName { get; set; }

        /// <summary>
        /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –≤ Telegram.
        /// </summary>
        public long? TeleChatId { get; set; }

        /// <summary>
        /// –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞.
        /// </summary>
        public string? TeleChatTitle { get; set; }

        /// <summary>
        /// –¢–∏–ø —á–∞—Ç–∞ (private, group, supergroup, channel).
        /// </summary>
        public virtual ChatType? TeleChatType { get; set; }

        /// <summary>
        /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ.
        /// </summary>
        public int? TeleChatMembersCount { get; set; }

        /// <summary>
        /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–π.
        /// </summary>
        public bool? IsGroupChat { get; set; }

        /// <summary>
        /// –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ.
        /// </summary>
        public virtual DateTime? LastMessageDate { get; set; }

        /// <summary>
        /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–∞—Ç–∞
        /// </summary>
        public virtual List<MyUser> ChatUsers { get; set; } = new List<MyUser>();

        /// <summary>
        /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–π.
        /// </summary>
        public bool? IsBan { get; set; } = false;

        /// <summary>
        /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–π.
        /// </summary>
        public int? LastUpdateId { get; set; }

        [JsonIgnore]
        public virtual List<MyUpdate>? ChatUpdates { set; get; } = new List<MyUpdate>();

        /// <summary>
        ///–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —á–∞—Ç–µ –∏ –æ–æ—Ç—Ç –±–æ—Ç–∞ –∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        public virtual List<MyMessage>? ChatMessages { set; get; } = new List<MyMessage>();

        //—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        public virtual MyMenuContent? CurentMenu { set; get; }

        //—Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        public int? CurentMenuId { set; get; }

        /// <summary>
        /// –ø–æ–ª–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–µ–Ω–∏—è –∏—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–∏–ø–∞ –≤ –∫–∞–∫–æ–º –æ–±—ä–µ–∫—Ç–µ –º—ã –∫–æ–≤—ã—Ä—è–µ–º—Å—è, –∫–∞–∫—É—é –∑–∞—è–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
        /// </summary>
        public string? ProcessCode { set; get; }

        /// <summary>
        /// –¢–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤ –º–µ–Ω—é
        /// </summary>
        public string? CurentTextModel { set; get; }

        /// <summary>
        /// –¢—É—Ç –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —É –Ω–∞—Å –º–µ–Ω—é—Ç—å—Å—è —Å–æ–±—à–µ–Ω–∏—è
        /// </summary>
        public long? CurentMessageIdForMenu { set; get; }

        public int? PriviousIncummingMessageId { set; get; }

        /// <summary>
        ///—Ç—É—Ç —Ö—Ä–∞–Ω–∏–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ç—Ä–æ–µ –ø—Ä–∏—à–ª–æ
        /// </summary>
        public virtual MyMessage? PriviousIncummingMessage { set; get; }

        public virtual List<MyWorkEnty> WorkItems { set; get; } = new List<MyWorkEnty>();

        //----------------------------------------------------------------------------------------

        public void AddUpddate(MyUpdate myUpdate)
        {
            LastUpdateId = myUpdate.TeleUpdateId;
            ChatUpdates.Add(myUpdate);
        }

        public void AddMessage(MyMessage newMessage)
        {
            LastMessageDate = newMessage.MessageDate;
            ChatMessages.Add(newMessage);
        }

        public void AddMessages(List<MyMessage> newMessages)
        {
            if (newMessages == null)
            {
                return;
            }
            foreach (var newMessage in newMessages)
            {
                LastMessageDate = newMessage.MessageDate;
                ChatMessages.Add(newMessage);
            }
        }

        public async Task OnEndMenu(
            TelegramBotClient client,
            CancellationToken cancellationToken,
            DbContext db
        )
        {
            if (CurentMenu == null)
            {
                return;
            }

            await ClearChat(client, cancellationToken);

            var executeEndMenu = new ScriptExecutor(new Scripts());
            await executeEndMenu.ExecuteEndMenu(
                CurentMenu.MenuCode,
                this,
                client,
                cancellationToken,
                db
            );

            CurentTextModel = "";
            Console.WriteLine(
                $"Bot {DateTime.Now} - –¥–µ–π—Å—Ç–≤–∏–µ ---OnEndMenu--- –æ–±—ä–µ–∫—Ç–µ:{EntyName} {Id}"
            );
        }

        public async Task OnStartMenu(
            TelegramBotClient client,
            CancellationToken cancellationToken,
            DbContext db
        )
        {
            if (CurentMenu == null)
            {
                return;
            }

            var executeEndMenu = new ScriptExecutor(new Scripts());
            await executeEndMenu.ExecuteStartMenu(
                CurentMenu.MenuCode,
                this,
                client,
                cancellationToken,
                db
            );

            CurentTextModel = CurentMenu.GetContent();
            Console.WriteLine(
                $"Bot {DateTime.Now} - –¥–µ–π—Å—Ç–≤–∏–µ ---OnStartMenu--- –æ–±—ä–µ–∫—Ç–µ:{EntyName} {Id}"
            );
        }

        public static MyChat CreateMyChatFromUpdate(Update update)
        {
            var chat =
                update.CallbackQuery?.Message?.Chat
                ?? update.Message?.Chat
                ?? update.EditedMessage?.Chat;

            MyChat result = new MyChat()
            {
                CreatedAt = DateTime.Now,
                IsDelite = false,
                IsGroupChat = chat?.IsForum,
                TeleChatId = chat?.Id,
                TeleChatType = chat?.Type,
                TeleChatTitle = chat?.Title,
                TeleChatUserName = chat?.Username,
            };

            return result; // –ò–ª–∏ –≤—ã–±—Ä–æ—Å—å—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        }

        public static MyChat CreateMyChatFromUpdate(Message message)
        {
            MyChat result = new MyChat()
            {
                CreatedAt = DateTime.Now,
                IsDelite = false,
                IsGroupChat = message.Chat?.IsForum,
                TeleChatId = message.Chat?.Id,
                TeleChatType = message.Chat?.Type,
                TeleChatTitle = message.Chat?.Title,
                TeleChatUserName = message.Chat?.Username,
            };

            return result; // –ò–ª–∏ –≤—ã–±—Ä–æ—Å—å—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        }

        public async Task SetNextMenu(
            MyMenuContent? nextProcess,
            TelegramBotClient telegramBotClient,
            CancellationToken cancellationToken,
            DbContext db
        )
        {
            var priviousProcess = CurentMenu;
            var priviousProcessCode = ProcessCode;
            await OnEndMenu(telegramBotClient, cancellationToken, db);
            //—Ç—É—Ç –º—ã –¥–æ–ª–∂–Ω—ã –ø–æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª—è –∫–æ–æ—Ç–æ—Ä—ã–µ –¥–æ —ç—Ç–æ–≥–æ –∏—Å—á–ø–æ–ª—å–∑–æ–≤–∞–ª–∏
            //-------------------

            CurentMenu = nextProcess;
            await OnStartMenu(telegramBotClient, cancellationToken, db);
            db.SaveChanges();
        }

        public async Task<string> SendMessageRequest()
        {
            return "";
        }

        public async Task ExecuteMessage() { }

        public async Task<string> ClearChat(
            TelegramBotClient client,
            CancellationToken cancellationToken
        )
        {
            if (ChatMessages.Count == 0)
                return $"ü§ñ {DateTime.Now}: –ù–µ –Ω–∞—à–µ–ª —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–æ—Ç—Ä—ã—ã–µ –Ω–∞–¥–æ–æ —É–¥–∞–ª—è—Ç—å –∏–∑ —á–∞—Ç–∞ -GqzB_";
            else
            {
                Console.WriteLine(
                    $"ü§ñ {DateTime.Now}: –ù–∞—á–∞–ª–æ –æ—á–∏—Å–∫–∏ —á–∞—Ç–∞ –æ—Ç –æ—Ç–æ—Å–ª–∞–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–Ω–µ–µ -YlWC6"
                );
                var remuveMessages = ChatMessages
                    .Where(i =>
                        i.NeedToDelite == true
                        && i.IsDelite == false
                        && i.IsIncomingMessage == false
                    )
                    .ToList();

                Console.WriteLine(
                    $"ü§ñ {DateTime.Now}: –ù–∞—à–µ–ª {remuveMessages.Count()} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞  -YlWC6"
                );

                bool isExptionTelegraam = false;
                while (true)
                {
                    try
                    {
                        var deliteMessage = remuveMessages.LastOrDefault() ?? null;

                        if (deliteMessage == null)
                        {
                            if (remuveMessages.Count() == 1)
                            {
                                deliteMessage = remuveMessages.FirstOrDefault();
                            }
                            else if (remuveMessages.Count() == 0)
                                break;
                        }

                        if (!isExptionTelegraam)
                        {
                            await client.DeleteMessageAsync(
                                TeleChatId,
                                deliteMessage.TeleMessageId ?? 0011,
                                cancellationToken: cancellationToken
                            );
                        }
                        ChatMessages.FirstOrDefault(m => m.Id == deliteMessage.Id).IsDelite = true;
                        remuveMessages.Remove(deliteMessage);
                        isExptionTelegraam = false;
                    }
                    catch (System.Exception ex)
                    {
                        isExptionTelegraam = true;
                        Console.WriteLine(
                            $"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—â–µ–Ω–∏—è BDMessageID: -yRO!@"
                        );
                    }
                }
                Console.WriteLine(
                    $"ü§ñ {DateTime.Now}: –£–¥–∞–ª–∏–ª –≤—Å–µ –µ—Å–ª–∏ –±—ã–ª–æ —á—Ç–æ —É–¥–∞–ª—è—Ç—å, –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–æ –≤—Å–µ –∫–∞–∫ –Ω–∞–¥–æ -2wzj+"
                );
            }
            return "ddd";
        }
    }
}
